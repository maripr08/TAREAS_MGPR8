---
title: "Introducción a las series temporales en Python"
author: "Mariana Guadalupe Ponce Rodriguez"
date: "2025-04-01"
output: html_document
---

```{python}

#| code-fold: true

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import statsmodels.api as sm
import calendar
from pandas.plotting import register_matplotlib_converters
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.ar_model import AutoReg

```

# Gráficas de una serie temporal

Las **series temporales** es una sucesión de observaciones registradas a intervalos de tiempo regulares. Son fundamentales en modelado predictivo y análisis de datos en diversas disciplinas.

Consideraremos el tipo de cambio nominal (pesos por dólar) con una frecuencia mensual.



## Serie


```{python}
# Cargar datos
#Instale: pip install openpyxl

inegi_data = pd.read_excel("./inegi_data.xlsx", parse_dates=['Periodo'])

#Filtro los datos (2016)
inegi_data = inegi_data[inegi_data["Periodo"].dt.year >= 2016]

```



```{python}
# Crear series temporales

inegi_data.set_index('Periodo', inplace=True) #Periodo como índice del DataFrame
MXN_xts = inegi_data['Tipo_Cambio_Nominal']


MXN_ts = pd.Series(inegi_data['Tipo_Cambio_Nominal'].values,
index=pd.period_range(start='2016-01',
periods=len(inegi_data), freq='M')) #M=mensual


print("Información de la serie temporal:")
print(MXN_xts.info())
print(MXN_xts.describe())

# 6. Gráfica serie temporal 
plt.figure(figsize=(10, 5))
plt.plot(MXN_xts.index, MXN_xts.values, marker='o')
plt.title("Tipo de Cambio Nominal")
plt.xlabel("Periodo")
plt.ylabel("Tipo de Cambio")
plt.grid(True)
plt.show()


fig = px.line(x=MXN_xts.index, y=MXN_xts.values, 
              labels={'x': 'Periodo', 'y': 'Tipo de Cambio Nominal'},
              title="Tipo de Cambio Nominal")
fig.update_xaxes(rangeslider_visible=True)
fig.show()
```


```{python}
#Preparando DataFrame

df = MXN_xts.reset_index()  
df.columns = ['Periodo', 'Tipo_Cambio_Nominal']  # Asegúrate de que los nombres coincidan
df['Año'] = df['Periodo'].dt.year
df['Mes'] = df['Periodo'].dt.month
df['Nombre_mes'] = df['Periodo'].dt.strftime('%b')
```


## Comparación anual

```{python}
plt.figure(figsize=(12,6))
sns.lineplot(data=df, x='Mes', y='Tipo_Cambio_Nominal', hue='Año', 
             palette='Dark2', marker='o')
plt.xticks(ticks=range(1, 13), labels=calendar.month_abbr[1:13])
plt.xlabel('Mes')
plt.ylabel('Tipo de Cambio Nominal')
plt.title('Comparación anual del Tipo de Cambio Nominal')
plt.legend(title='Año')
plt.show()
```

#Comparación mensual

```{python}
plt.figure(figsize=(12,6))
sns.lineplot(data=df, x='Año', y='Tipo_Cambio_Nominal', hue='Mes', 
             palette='tab10', marker='o')
plt.xlabel('Año')
plt.ylabel('Tipo de Cambio Nominal')
plt.title('Comparación mensual: Evolución de cada mes a lo largo de los años')

months_sorted = sorted(df['Mes'].unique())
labels = [calendar.month_abbr[m] for m in months_sorted]
plt.legend(title='Mes', labels=labels)
plt.show()
```

```{python}
df['Año'] = df['Periodo'].dt.year
df['Trimestre'] = df['Periodo'].dt.quarter

# Crear una nueva variable combinada para mostrar los trimestres como "2016-Q1", "2016-Q2", etc.
df['Año_Trimestre'] = df['Año'].astype(str) + '-Q' + df['Trimestre'].astype(str)

plt.figure(figsize=(8,5))
sns.boxplot(data=df, x='Año_Trimestre', y='Tipo_Cambio_Nominal', hue='Año', palette='Paired')

plt.xlabel('Trimestre')
plt.ylabel('Tipo de Cambio Nominal')
plt.title('Boxplot Trimestral del Tipo de Cambio Nominal por Año')
plt.legend(title='Año', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```

## Heatmap

```{python}
heatmap_df = df.pivot(index='Mes', columns='Año', values='Tipo_Cambio_Nominal')


plt.figure(figsize=(12, 6))
sns.heatmap(heatmap_df, cmap='Spectral', linewidths=0.5, annot=True, fmt=".2f", cbar_kws={'label': 'Tipo de Cambio'}) #Annot: Mostrar valores, fmt:valores con 2 decimales
plt.title('Heatmap Mensual del Tipo de Cambio Nominal')
plt.xlabel('Año')
plt.ylabel('Mes')
plt.yticks(ticks=range(1, 13), labels=['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'], rotation=0)
plt.tight_layout()
plt.show()

```

## Surface

```{python}
Z = heatmap_df.values
x = heatmap_df.columns.astype(str)  # Años
y = ['Ene','Feb','Mar','Abr','May','Jun','Jul','Ago','Sep','Oct','Nov','Dic']  # Meses

#3D
fig = go.Figure(data=[go.Surface(z=Z, x=x, y=y, colorscale='Spectral')])
fig.update_layout(
    title='Superficie del Tipo de Cambio Nominal',
    scene=dict(
        xaxis_title='Año',
        yaxis_title='Mes',
        zaxis_title='Tipo de Cambio'
    ),
    autosize=True,
    height=600
)
fig.show()
```

# Estadísticas de una serie temporal

## Media muestral

La media muestral es el promedio de los valores de la serie temporal a lo largo del tiempo. Se calcula como:

\begin{equation}
\bar{y}=\frac{1}{T} \sum_{t=1}^T y_t
\end{equation}

Donde $T$ es el número total de observaciones de la serie y $y_t$ es el valor de la serie en el tiempo $t$.

```{python}
mean = MXN_xts.mean()
print(mean)
```

## Varianza muestral

La varianza muestral cuantifica la dispersión de los valores de la serie alrededor de su media. Se calcula como:

\begin{equation}
s^2=\frac{1}{T-1} \sum_{t=1}^T (y_t-\bar{y})^2
\end{equation}

```{python}
var =  MXN_xts.var()
print(var)
```

## Autocovarianza muestral

Cuantifica la covarianza entre dos valores de la serie separados por un retraso (lag) $k$. Se calcula como:

\begin{equation}
\gamma_k=\frac{1}{T} \sum_{t=k+1}^T (y_t-\bar{y})(y_{t-k}-\bar{y})
\end{equation}

En este caso $y_{t-k}$ es el valor de la serie en el tiempo $t-k$.

## Autocorrelación muestral {.tabset}

Es una versión normalizada de la autocovarianza, que mide la correlacion entre dos valores de la serie separados por un retraso $k$, se calcula como:

\begin{equation}
\rho_k=\frac{\gamma_k}{\gamma_0}
\end{equation}

### Autocorrelación

```{python}

plt.figure(figsize=(10, 6))
plot_acf(MXN_xts, lags=20) 
plt.title('Autocorrelación (ACF) del Tipo de Cambio Nominal')
plt.xlabel('Lag')
plt.ylabel('Autocorrelación (ACF)')
plt.show()
```

##Lags

```{python}
lags = 12  
plt.figure(figsize=(12, 6))

for i in range(1, lags + 1):
    plt.plot(MXN_xts.index, MXN_xts.shift(i), label=f'Lag {i}')

plt.title('Serie Temporal vs Lags')
plt.xlabel('Fecha')
plt.ylabel('Tipo de Cambio Nominal')
plt.legend(title='Lags')
plt.grid(True)
plt.show()

```

## Estacionariedad

Una serie temporal es **estacionaria** si la media y la varianza es constante a lo largo del tiempo y la autocovarianza entre dos puntos depende sólo de la distancia temporal entre ellos, no del momento específico.

Se aplica la prueba de Dickey-Fuller (ADF)

```{python}
adf_result = adfuller(MXN_xts)
print(adf_result)
```

### Una estructura más entendible de la prueba (ADF)

```{python}

print("Augmented Dickey-Fuller Test")
print(f"Data: MXN_ts")
print(f"Dickey-Fuller = {adf_result[0]:.4f}, Lag order = {adf_result[2]}")
print(f"p-value = {adf_result[1]:.4f}")
print("Alternative hypothesis: stationary")
```

## Diferenciación

Si la serie no es estacionaria se puede aplicar diferenciación para eliminar la tendencia.

```{python}
MXN_diff = MXN_xts.diff().dropna()  

plt.figure(figsize=(10, 6))
plt.plot(MXN_diff.index, MXN_diff.values, marker='o')
plt.title("Serie Temporal Diferenciada del Tipo de Cambio Nominal")
plt.xlabel("Periodo")
plt.ylabel("Diferencia del Tipo de Cambio")
plt.grid(True)
plt.show()

```

# Descomposición {.tabset}

Una serie temporal $y_t$ puede descomponerse en la suma (aditiva) de sus componentes principales:

\begin{equation}
y_t = T_t+S_t+R_t
\end{equation}

Donde $T_t$ es la tendencia (movimiento a largo plazo), $S_t$ es la estacionalidad (patrones repetitivos en intervalos regulares) y $R_t$ es el residuo (ruido aleatorio). O bien, de manera multiplicativa:

\begin{equation}
y_t = T_t S_t R_t
\end{equation}


## Serie original


```{python}


decomposition = seasonal_decompose(MXN_xts, model='additive', period=12)  

plt.figure(figsize=(12, 8))

plt.subplot(4, 1, 1)
plt.plot(MXN_xts, label='Serie Original')
plt.legend(loc='best')
plt.title('Serie Temporal Original')

plt.subplot(4, 1, 2)
plt.plot(decomposition.trend, label='Tendencia', color='orange')
plt.legend(loc='best')
plt.title('Componente de Tendencia')

plt.subplot(4, 1, 3)
plt.plot(decomposition.seasonal, label='Estacionalidad', color='green')
plt.legend(loc='best')
plt.title('Componente Estacional')

plt.subplot(4, 1, 4)
plt.plot(decomposition.resid, label='Residuo', color='red')
plt.legend(loc='best')
plt.title('Componente Residual')

plt.tight_layout()
plt.show()
```

## Serie diferenciada

```{python}
MXN_diff = MXN_xts.diff().dropna()

# Descomponer la serie diferenciada
decomposition_diff = seasonal_decompose(MXN_diff, model='additive', period=12)

#
plt.figure(figsize=(12, 8))


plt.subplot(4, 1, 1)
plt.plot(MXN_diff, label='Serie Diferenciada', color='blue')
plt.legend(loc='best')
plt.title('Serie Temporal Diferenciada')


plt.subplot(4, 1, 2)
plt.plot(decomposition_diff.trend, label='Tendencia', color='orange')
plt.legend(loc='best')
plt.title('Componente de Tendencia')


plt.subplot(4, 1, 3)
plt.plot(decomposition_diff.seasonal, label='Estacionalidad', color='green')
plt.legend(loc='best')
plt.title('Componente Estacional')


plt.subplot(4, 1, 4)
plt.plot(decomposition_diff.resid, label='Residuo', color='red')
plt.legend(loc='best')
plt.title('Componente Residual')

plt.tight_layout()
plt.show()

```

# AutoRegresión {.tabset}

## Coeficientes

```{python}
MXN_ar = AutoReg(MXN_xts, lags=5).fit()

print(MXN_ar.params)

```

## Gráfica

```{python}
Valores_ajustados = MXN_ar.fittedvalues

# Crear un DataFrame con los valores reales y ajustados
import pandas as pd
MXN_ar_res = pd.DataFrame({'MXN': MXN_xts, 'MXN_fitted': Valores_ajustados})

# Graficar los valores reales y ajustados
plt.figure(figsize=(12, 6))
plt.plot(MXN_ar_res.index, MXN_ar_res['MXN'], label='MXN Real', color='blue')
plt.plot(MXN_ar_res.index, MXN_ar_res['MXN_fitted'], label='MXN Ajustado', color='red')
plt.title('Gráfica de los Valores Reales y Ajustados del Tipo de Cambio Nominal')
plt.xlabel('Fecha')
plt.ylabel('Tipo de Cambio Nominal')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
```

##Residuos

```{python}
residuos = MXN_ar.resid


plt.figure(figsize=(12, 6))
plt.plot(residuos.index, residuos, label='Residuos', color='cyan')
plt.title('Residuos del Modelo AR')
plt.xlabel('Fecha')
plt.ylabel('Residuos')
plt.legend(loc='best')
plt.grid(True)
plt.tight_layout()
plt.show()
```

## Forecast

```{python}
forecast_steps = 12


forecast_values = MXN_ar.predict(start=len(MXN_xts), end=len(MXN_xts)+forecast_steps-1)


forecast_index = pd.date_range(start=MXN_xts.index[-1] + pd.Timedelta(days=1), periods=forecast_steps, freq='M')

plt.figure(figsize=(12, 6))
plt.plot(MXN_xts.index, MXN_xts, label='Serie Original', color='blue')
plt.plot(forecast_index, forecast_values, label='Pronóstico', color='red', linestyle='--')

plt.title('Pronóstico del Tipo de Cambio Nominal')
plt.xlabel('Fecha')
plt.ylabel('Tipo de Cambio Nominal')
plt.legend(loc='best')
plt.grid(True)
plt.tight_layout()
plt.show()
```

